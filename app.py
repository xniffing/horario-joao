"""
Streamlit Interface for OR-Tools Shift Scheduler

Interactive web interface for generating and visualizing shift schedules.
"""

import streamlit as st
import pandas as pd
import calendar
from datetime import datetime, date
import plotly.express as px
import plotly.graph_objects as go
from scheduler import ShiftScheduler


def main():
    st.set_page_config(
        page_title="Gestor de Turnos",
        page_icon="üìÖ",
        layout="wide"
    )
    
    st.title("üìÖ Gestor de Turnos OR-Tools")
    st.markdown("Gere hor√°rios mensais de turnos para 5 trabalhadores com restri√ß√µes otimizadas")
    
    # Initialize scheduler (will be recreated with new parameters when needed)
    
    # Sidebar controls
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√£o do Hor√°rio")
        
        # Month/Year selector
        col1, col2 = st.columns(2)
        with col1:
            month = st.selectbox(
                "M√™s",
                options=list(range(1, 13)),
                format_func=lambda x: calendar.month_name[x],
                index=datetime.now().month - 1
            )
        with col2:
            year = st.selectbox(
                "Ano",
                options=list(range(2024, 2030)),
                index=0
            )
        
        st.markdown("---")
        st.markdown("### üë• Configura√ß√µes da Equipa")
        
        # Configurable parameters
        num_workers = st.slider(
            "N√∫mero de Trabalhadores",
            min_value=3,
            max_value=10,
            value=4,
            help="N√∫mero total de trabalhadores no sistema"
        )
        
        workers_per_shift = st.slider(
            "Trabalhadores por Turno",
            min_value=1,
            max_value=1,
            value=1,
            help="N√∫mero de trabalhadores por turno (sempre 1 por turno)"
        )
        
        st.markdown("### üìÖ Dias de Trabalho por Semana")
        col1, col2 = st.columns(2)
        with col1:
            min_working_days = st.slider(
                "Dias M√≠nimos",
                min_value=1,
                max_value=6,
                value=1,
                help="Dias m√≠nimos de trabalho por semana"
            )
        with col2:
            max_working_days = st.slider(
                "Dias M√°ximos",
                min_value=2,
                max_value=7,
                value=7,
                help="Dias m√°ximos de trabalho por semana"
            )
        
        # Validate min/max
        if min_working_days >= max_working_days:
            st.error("Os dias m√≠nimos devem ser inferiores aos dias m√°ximos")
            st.stop()
        
        st.markdown("### üîß Op√ß√µes Avan√ßadas")
        
        # Strict pattern checkbox
        strict_pattern = st.checkbox(
            "Aplicar padr√£o estrito 4+2 dias",
            value=True,
            help="OBRIGAT√ìRIO: Trabalhadores devem trabalhar 4 dias consecutivos seguidos de 2 dias de folga"
        )
        
        if not strict_pattern:
            st.info("üí° **Modo Flex√≠vel Ativo**: O padr√£o estrito 4+2 dias est√° desativado. Isto aumenta significativamente as hip√≥teses de encontrar um hor√°rio vi√°vel.")
        else:
            st.success("‚úÖ **Padr√£o 4+2 Obrigat√≥rio**: Trabalhadores trabalham 4 dias consecutivos seguidos de 2 dias de folga.")
        
        # Check for problematic configurations
        if num_workers < 4:
            st.error("‚ö†Ô∏è **Configura√ß√£o Insuficiente**: S√£o necess√°rios pelo menos 4 trabalhadores.")
        elif num_workers == 4 and workers_per_shift == 1:
            st.warning("‚ö†Ô∏è **Configura√ß√£o M√≠nima**: 4 trabalhadores com 1 por turno √© o m√≠nimo vi√°vel.")
        elif num_workers >= 5 and workers_per_shift == 1:
            st.success("‚úÖ **Configura√ß√£o Recomendada**: Esta configura√ß√£o deve funcionar bem.")
        elif num_workers >= 6:
            st.success("‚úÖ **Configura√ß√£o Excelente**: Boa cobertura e flexibilidade.")
        
        # Generate button
        generate_btn = st.button("üöÄ Gerar Hor√°rio", type="primary", use_container_width=True)
        
        # Display shift information
        st.markdown("---")
        st.markdown("### üìã Informa√ß√£o dos Turnos")
        st.markdown("""
        **Dias √öteis (Seg-S√°b):**
        - 7h-16h (Manh√£)
        - 15h-00h (Tarde)
        - 00h-08h (Noite)
        - 9h-21h (Estendido)
        
        **Domingos:**
        - 7h-16h (Manh√£)
        - 15h-00h (Tarde)
        - 00h-08h (Noite)
        """)
        
        st.markdown("### üìä Restri√ß√µes")
        st.markdown("""
        - **Cobertura por Turno**: 1 trabalhador por turno
        - **Cobertura por Dia**:
          - Dias √∫teis: 4 turnos (3 normais + 1 estendido) = 4 trabalhadores
          - Domingos: 3 turnos (3 normais) = 3 trabalhadores
        - **Padr√£o de Trabalho**: **OBRIGAT√ìRIO** - 4 dias consecutivos, depois 2 dias de folga
        - **Consist√™ncia de Turno**: **OBRIGAT√ìRIA** - Trabalhadores mant√™m o mesmo turno durante o per√≠odo de trabalho at√© folgarem (depois podem mudar de turno)
        - **Restri√ß√µes**: Sem semana completa de folga
        """)
        
        st.markdown("""
        ## üéØ Solu√ß√µes Recomendadas
        
        ### Solu√ß√£o A: Configura√ß√£o M√≠nima
        - ‚úÖ **4 trabalhadores, 1 por turno, 1-7 dias/semana** (m√≠nimo vi√°vel com consist√™ncia)
        - ‚ö†Ô∏è **5+ trabalhadores**: Pode n√£o funcionar com consist√™ncia obrigat√≥ria
        
        ### Solu√ß√£o B: Configura√ß√£o Flex√≠vel
        - ‚úÖ **4 trabalhadores, 1 por turno, 1-7 dias/semana** (recomendado)
        - üí° **Nota**: Com consist√™ncia obrigat√≥ria, 4 trabalhadores √© o ideal
        
        ### Solu√ß√£o C: Configura√ß√£o Alternativa
        - üîß **Para mais trabalhadores**: Considere desativar o padr√£o estrito 4+2 dias
        - üîß **Para maior flexibilidade**: Ajuste os dias de trabalho por semana
        
        ## üéõÔ∏è Recomenda√ß√µes da Interface Streamlit
        
        A interface atual permite-lhe experimentar com estes par√¢metros:
        - **Use 4 trabalhadores, 1 por turno** para sucesso garantido com consist√™ncia
        - **Para mais trabalhadores**: Pode ser necess√°rio relaxar restri√ß√µes
        - **Ajuste os dias de trabalho para 1-7** para m√°xima flexibilidade
        - **Use meses diferentes** para encontrar um melhor alinhamento
        
        > ‚ö†Ô∏è **Nota Importante**: O padr√£o de 4 dias de trabalho/2 dias de folga √© a restri√ß√£o mais rigorosa e a principal raz√£o para a inviabilidade em cen√°rios de menor for√ßa de trabalho.
        """)
    
    # Main content area
    if generate_btn:
        # Create scheduler with current parameters
        scheduler = ShiftScheduler(
            num_workers=num_workers,
            workers_per_shift=workers_per_shift,
            min_working_days=min_working_days,
            max_working_days=max_working_days,
            strict_pattern=strict_pattern
        )
        
        with st.spinner("A gerar hor√°rio... Isto pode demorar alguns momentos."):
            result = scheduler.solve_schedule(year, month)
        
        if result:
            st.success(f"‚úÖ Hor√°rio gerado com sucesso para {calendar.month_name[month]} {year}")
            
            # Store result in session state
            st.session_state.schedule_result = result
            st.session_state.scheduler = scheduler
            
            # Create tabs for different views
            tab1, tab2, tab3, tab4 = st.tabs(["üìÖ Vista do Calend√°rio", "üë• Vista dos Trabalhadores", "üìä An√°lise de Cobertura", "üìÅ Exportar"])
            
            with tab1:
                st.subheader("üìÖ Hor√°rio por Dia e Turno")
                schedule_df = scheduler.format_schedule(result)
                
                if not schedule_df.empty:
                    # Filter out unassigned shifts
                    assigned_df = schedule_df[schedule_df['Contagem'] > 0].copy()
                    
                    # Color code the shifts
                    def color_shift(val):
                        colors = {
                            '7h-16h': 'background-color: #e8f5e8',    # Light green
                            '15h-00h': 'background-color: #fff3cd',  # Light yellow
                            '00h-08h': 'background-color: #d1ecf1',  # Light blue
                            '9h-21h': 'background-color: #f8d7da'   # Light red
                        }
                        return colors.get(val, '')
                    
                    # Apply styling
                    styled_df = assigned_df.style.applymap(color_shift, subset=['Turno'])
                    st.dataframe(styled_df, use_container_width=True)
                    
                    # Summary statistics
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Total de Dias", len(schedule_df['Data'].unique()))
                    with col2:
                        st.metric("Total de Turnos", len(assigned_df))
                    with col3:
                        coverage = len(assigned_df[assigned_df['Contagem'] == 2]) / len(assigned_df) * 100
                        st.metric("Cobertura %", f"{coverage:.1f}%")
                else:
                    st.warning("Nenhum dado de hor√°rio dispon√≠vel")
            
            with tab2:
                st.subheader("üë• Hor√°rio por Trabalhador")
                worker_df = scheduler.get_worker_schedule(result)
                
                if not worker_df.empty:
                    # Create worker selector
                    selected_worker = st.selectbox(
                        "Selecionar Trabalhador para Ver",
                        options=[f"Trabalhador {i+1}" for i in range(scheduler.num_workers)],
                        key="worker_selector"
                    )
                    
                    # Filter data for selected worker
                    worker_data = worker_df[worker_df['Trabalhador'] == selected_worker]
                    
                    # Display worker schedule
                    st.dataframe(worker_data, use_container_width=True)
                    
                    # Worker statistics
                    working_days = len(worker_data[worker_data['Estado'] == 'Trabalho'])
                    off_days = len(worker_data[worker_data['Estado'] == 'Folga'])
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("Dias de Trabalho", working_days)
                    with col2:
                        st.metric("Dias de Folga", off_days)
                    
                    # Visualize worker pattern
                    fig = px.bar(
                        worker_data, 
                        x='Data', 
                        y='Estado',
                        color='Estado',
                        title=f"Padr√£o de Hor√°rio - {selected_worker}",
                        color_discrete_map={'Trabalho': '#2E8B57', 'Folga': '#DC143C'}
                    )
                    fig.update_layout(xaxis_tickangle=45)
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("Nenhum dado de hor√°rio de trabalhador dispon√≠vel")
            
            with tab3:
                st.subheader("üìä An√°lise de Cobertura")
                
                if 'schedule_result' in st.session_state:
                    schedule_df = scheduler.format_schedule(result)
                    
                    if not schedule_df.empty:
                        # Shift coverage analysis
                        shift_coverage = schedule_df.groupby('Turno')['Contagem'].agg(['sum', 'mean', 'count']).reset_index()
                        shift_coverage.columns = ['Turno', 'Total Trabalhadores', 'M√©dia Trabalhadores', 'Dias']
                        shift_coverage['Cobertura %'] = (shift_coverage['Total Trabalhadores'] / (shift_coverage['Dias'] * 2) * 100).round(1)
                        
                        st.subheader("Resumo da Cobertura de Turnos")
                        st.dataframe(shift_coverage, use_container_width=True)
                        
                        # Visualize coverage
                        fig = px.bar(
                            shift_coverage,
                            x='Turno',
                            y='Cobertura %',
                            title='Percentagem de Cobertura por Turno',
                            color='Cobertura %',
                            color_continuous_scale='RdYlGn'
                        )
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Daily coverage heatmap
                        daily_coverage = schedule_df.pivot_table(
                            index='Data', 
                            columns='Turno', 
                            values='Contagem', 
                            fill_value=0
                        )
                        
                        fig = px.imshow(
                            daily_coverage.T,
                            title='Mapa de Calor - Cobertura Di√°ria de Turnos',
                            color_continuous_scale='RdYlGn',
                            aspect='auto'
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.warning("Nenhum dado de cobertura dispon√≠vel")
            
            with tab4:
                st.subheader("üìÅ Exportar Hor√°rio")
                
                if 'schedule_result' in st.session_state:
                    schedule_df = scheduler.format_schedule(result)
                    worker_df = scheduler.get_worker_schedule(result)
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**üìÖ Hor√°rio Di√°rio (CSV)**")
                        csv_schedule = schedule_df.to_csv(index=False)
                        st.download_button(
                            label="Descarregar Hor√°rio Di√°rio",
                            data=csv_schedule,
                            file_name=f"horario_{year}_{month:02d}.csv",
                            mime="text/csv"
                        )
                    
                    with col2:
                        st.markdown("**üë• Hor√°rio dos Trabalhadores (CSV)**")
                        csv_workers = worker_df.to_csv(index=False)
                        st.download_button(
                            label="Descarregar Hor√°rio dos Trabalhadores",
                            data=csv_workers,
                            file_name=f"trabalhadores_{year}_{month:02d}.csv",
                            mime="text/csv"
                        )
                    
                    # Display preview of data to export
                    st.markdown("**Pr√©-visualiza√ß√£o dos Dados para Exportar:**")
                    preview_tab1, preview_tab2 = st.tabs(["Hor√°rio Di√°rio", "Hor√°rio dos Trabalhadores"])
                    
                    with preview_tab1:
                        st.dataframe(schedule_df.head(10), use_container_width=True)
                    
                    with preview_tab2:
                        st.dataframe(worker_df.head(10), use_container_width=True)
        else:
            st.error("‚ùå Imposs√≠vel gerar um hor√°rio vi√°vel. As restri√ß√µes podem ser demasiado restritivas para este m√™s.")
            st.markdown("""
            **Solu√ß√µes poss√≠veis:**
            - Experimente um m√™s diferente
            - O padr√£o de 4 dias de trabalho/2 dias de folga pode n√£o se alinhar bem com o calend√°rio deste m√™s
            - Considere ajustar as restri√ß√µes se necess√°rio
            """)
    
    # Display instructions if no schedule generated yet
    if 'schedule_result' not in st.session_state:
        st.markdown("""
        ## üöÄ Como Come√ßar
        
        1. **Selecionar M√™s/Ano** na barra lateral
        2. **Clicar em "Gerar Hor√°rio"** para criar o hor√°rio
        3. **Ver Resultados** nos diferentes separadores:
           - **Vista do Calend√°rio**: Ver quais trabalhadores est√£o atribu√≠dos a cada turno
           - **Vista dos Trabalhadores**: Ver o hor√°rio individual de cada trabalhador
           - **An√°lise de Cobertura**: Analisar a cobertura de turnos e padr√µes
           - **Exportar**: Descarregar hor√°rios como ficheiros CSV
        
        ## üìã Sobre o Gestor de Hor√°rios
        
        Este sistema utiliza o Google OR-Tools para resolver restri√ß√µes complexas de hor√°rios:
        - **5 Trabalhadores** com hor√°rios rotativos
        - **4 Tipos de Turno** (3 aos domingos)
        - **2 Trabalhadores por Turno** para cobertura adequada
        - **Padr√£o de 4 Dias de Trabalho, 2 Dias de Folga**
        - **Tipos de Turno Consistentes** durante os per√≠odos de trabalho
        """)
        
        # Show example of what the schedule looks like
        st.markdown("### üìä Pr√©-visualiza√ß√£o do Exemplo de Hor√°rio")
        example_data = {
            'Date': ['2024-01-01', '2024-01-01', '2024-01-01', '2024-01-01'],
            'Day': ['Segunda-feira', 'Segunda-feira', 'Segunda-feira', 'Segunda-feira'],
            'Shift': ['7h-16h', '15h-00h', '00h-08h', '9h-21h'],
            'Workers': ['Trabalhador 1, Trabalhador 2', 'Trabalhador 3, Trabalhador 4', 'Trabalhador 5, Trabalhador 1', 'Trabalhador 2, Trabalhador 3'],
            'Count': [2, 2, 2, 2]
        }
        example_df = pd.DataFrame(example_data)
        st.dataframe(example_df, use_container_width=True)


if __name__ == "__main__":
    main()
